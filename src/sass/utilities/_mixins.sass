// ==========================================================================
// Mixins
//
// [1] SMACSS Theming
// [2] Media quiries
// [3] Prefixer
// [4] IE Specific Styles
// [5] Sizes
// [6] Fonts
// [7] Effects
// [8] Layout
// [9] Layout Helper
// [10] Borders
// [11] Pseudo Factory
// [12] Shapes
// [13] Skins
// [14] Background Images
// [15] Opacity & Colors
// [16] Card Depths
// ==========================================================================



// [1] SMACSS Theming
// ==========================================================================

/// SMACSS Theming
/// @group Mixins
/// @param {String} $name - theme name
/// @example sass - Usage - Basic usage
///   .foobar
///     background: $color__background
///     +theme(foo)
///       background: $color__background--shaded

=theme($name)
  @if $theme == $name
    @content



// [2] Media queries
// ==========================================================================

/// Media Querues - Allows you to pass inline media queries
/// @group Mixins
/// @param {String} $media - breakpoint
/// @requires {Varaible}
/// @example sass - Usage - Basic usage
///   .foobar
///     width: 50%
///     +respond-to($tablet-sm)
///       width: 100%

=respond-to($media)
  @media #{$media}
    @content



// [3] Prefixer
// ==========================================================================

/// Prefixer - Works well with other mixins
/// @group Mixins
/// @param {String} $property - css property
/// @param {String} $value - property values
/// @param {String} $prefixes - webkit moz ms o
/// @example sass - Usage - Mixin usage
///   =transition($props)
///     +prefixer(transition, $props)
/// @example sass - Usage - Basic usage
///   .foobar
///     +transition(all 300ms linear)

=prefixer($property, $value, $prefixes: webkit moz ms o)

  @each $prefix in $prefixes
    #{'-' + $prefix + '-' + $property}: $value

  #{$property}: $value



// [4] IE Specific Styles
// ==========================================================================

/// IE Specific Styles
/// @group Mixins
/// @example sass - Usage
///   .foobar
///     &.lt-ie8
///       +old-ie
///         { ... }

=old-ie
  @if $old-ie
    @content



// [5] Sizes
// ==========================================================================

/// Element Sizes
/// @group Mixins
/// @example sass - Usage
///   .selector
///     +size(1024px, 500px)
/// @example css - CSS Output
///   .selector { width: 1024px; height: 500px; }

=size($w, $h)
  width: $w
  height: $h



// [6] Fonts
// ==========================================================================

/// Font Sizes
/// @group Mixins
/// @example sass - Usage
///   .selector
///     +font-size(18)
/// @example css - CSS Output
///   .selector { font-size: 1.125rem;}

=font-size($font-size: $base__font--size)
  +transition(all .2s ease-in-out)
  font-size: ($font-size) + px
  font-size: rem-sizing($font-size) + rem



// [7] Effects & Animations
// ==========================================================================

/// @group Mixins

=transition($props)
  +prefixer(transition, $props)
  //property, duration, method (ex: width 2s linear)


=translate($props)
  +prefixer(transform, translate($props))


=rotate($deg)
  +prefixer(transform, rotate($deg))


=box-shadow($props)
  +prefixer(box-shadow, $props)


=scale($val)
  +prefixer(transform, scale($val))
  // ex: +scale(2) scales the element 2x normal size


/// Keyframes
/// @group Mixins
/// @example sass - Usage
///   +keyframes(loader)
/// @example css - CSS Output
///   @keyframes loader
///     0%,
///       box-shadow: 0 2.5em 0 -1.3em
///     40%
///       box-shadow: 0 2.5em 0 0

=keyframes($name)
  +prefixer(keyframes, $name)
    @content


/// Animations
/// @group Mixins
/// @example sass - Usage
///   .selector 
///     +animation(loader)
/// @example css - CSS Output
///   .selector
///     animation: loader 1.8s infinite ease-in-out

=animation($name)
  +prefixer(animation, $name)



// [8] Layout
// ==========================================================================

/// Position - Assign an element a position
/// @group Mixins
/// @example sass - Usage
///   .selector
///     +position(abs)

=position($position: 'rel')

  @if $position == 'abs'
    position: absolute

  @else if $position == 'rel'
    position: relative

  @else if $position == 'fix'
    position: fixed


/// Location - Assign an elements exact position
/// @group Mixins
/// @example sass - Usage
///   .selector
///     +location(topLeft, 10, 20)

=location($location, $vertical: auto, $horizontal: auto)

  @if $location == 'topLeft'
    top: $vertical + px
    left: $horizontal + px

  @else if $location == 'topRight'
    top: $vertical + px
    right: $horizontal + px

  @else if $location == 'bottomLeft'
    bottom: $vertical + px
    left: $horizontal + px

  @else if $location == 'bottomRight'
    bottom: $vertical + px
    right: $horizontal + px

  @else if $location == 'all'
    top: 0
    right: 0
    bottom: 0
    left: 0


/// Perfectly center any element - as long as the parent it positioned relative
/// @group Mixins
/// @example sass - Usage
///   .selector
///     +middle-center(abs)
/// @example css - CSS Output
///   .selector { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%) }

=middle-center($position: 'abs')
  +position($position)
  top: 50%
  left: 50%
  +prefixer(transform, translate(-50%, -50%))


/// Builds out a responsive grid system all based on percentages
/// @group Mixins
/// @example sass - Usage
///   .column
///     +grid-factory(4, 2%)

=grid-factory($col-per-row, $margin)
  width: ((100% - (($col-per-row - 1) * $margin)) / $col-per-row)
  &:nth-child(n)
    margin-right: $margin
    margin-bottom: $margin
  &:nth-child(#{$col-per-row}n)
    margin-right: 0
    margin-bottom: 0


/// Column Span
/// Takes the default width and multiples is by the given number of columns you want the element to span
/// @group Mixins
/// @example sass - Usage
///   $cell__width      : 175px !default
///   [colspan="3"]
///     +column-span($cell__width, 3)
/// @example css - CSS Output
///   [colspan="3"] { width: 525px; }

=column-span($default, $number)
  width: $default * $number


// [9] Layout Helpers
// ==========================================================================

/// @group Mixins

=inline-block($alignment: baseline)
  display: inline-block

  @if $alignment and $alignment != none
    vertical-align: $alignment

  +old-ie
    zoom: 1
    *display: inline
    *vertical-align: auto

/// Vertical Center
/// @group Mixins
/// @example sass - Usage
///   .dropdown span, dropdown span i
///     +vertical-center(40px)

=vertical-center($alignment, $height)
  height: $height
  line-height: $height
  +inline-block(middle)


/// Padding Position
/// @group Mixins
/// @example sass - Usage
///   .dropdown span, dropdown span i
///     +vertical-center(40px)

=padding-position($side, $amount: $base__padding-size)
  padding-#{$side}: ($amount) + px
  padding-#{$side}: rem-sizing($amount) + rem


/// Padding
/// @group Mixins
/// @example sass - Usage
///   .content__body
///     +padding(20,40)

=padding($padding: $base__padding--size, $pad2: false, $pad3: false, $pad4: false)
  @if $pad4
    padding: ($padding) + px ($pad2) + px ($pad3) + px ($pad4) + px
    padding: rem-sizing($padding) + rem rem-sizing($pad2) + rem rem-sizing($pad3) + rem rem-sizing($pad4) + rem
  @else if $pad3
    padding: ($padding) + px ($pad2) + px ($pad3) + px
    padding: rem-sizing($padding) + rem rem-sizing($pad2) + rem rem-sizing($pad3) + rem
  @else if $pad2
    padding: ($padding) + px ($pad2) + px
    padding: rem-sizing($padding) + rem rem-sizing($pad2) + rem
  @else
    padding: ($padding) + px
    padding: rem-sizing($padding) + rem

/// @group Mixins

=margin-position($side, $amount: $base__margin-size)
  margin-#{$side}: ($amount) + px
  margin-#{$side}: rem-sizing($amount) + rem

/// Margin
/// @group Mixins
/// @example sass - Usage
///   .content__body
///     +padding(20,40)

=margin($margin: $base__margin--size, $mrg2: false, $mrg3: false, $mrg4: false)
  @if $mrg4
    margin: ($margin) + px ($mrg2) + px ($mrg3) + px ($mrg4) + px
    margin: rem-sizing($margin) + rem rem-sizing($mrg2) + rem rem-sizing($mrg3) + rem rem-sizing($mrg4) + rem
  @else if $mrg3
    margin: ($margin) + px ($mrg2) + px ($mrg3) + px
    margin: rem-sizing($margin) + rem rem-sizing($mrg2) + rem rem-sizing($mrg3) + rem
  @else if $mrg2
    margin: ($margin) + px ($mrg2) + px
    margin: rem-sizing($margin) + rem rem-sizing($mrg2) + rem
  @else
    margin: ($margin) + px
    margin: rem-sizing($margin) + rem



// [10] Borders
// ==========================================================================

/// Border
/// @group Mixins
/// @example sass - Usage
/// .selector
///    +border(solid 1px $color-border)
/// @example css - CSS Output
///   .selector { border: solid 1px #888 }

=border($properties)
  border: $properties

/// Border Active
/// @group Mixins
/// @example sass - Usage
/// .selector
///    +border-active(top, solid 1px $color-border)
/// @example css - CSS Output
///   .selector { border-top: solid 1px #888 }

=border-active($position, $properties)
  border-#{$position}: $properties


/// Radius
/// @group Mixins
/// @example sass - Usage
/// .selector
///    +radius(2px)
/// @example css - CSS Output
///   .selector { border-radius: 2px }

=radius($size)
  +prefixer(border-radius, $size)



// [11] Pseudo Factory
// ==========================================================================

/// Pseudo Elements
/// @group Mixins
/// @example sass - Usage
///   .selector
///     +pseudo-el(after, 50px, 50px)
/// @example css - CSS Output
///   .selector:before { content: ''; width: 50px; height: 50px }

=pseudo-el($elem, $elemWidth: auto, $elemHeight: auto)

  @if $elem == 'before' or $elem == 'after'
    &:#{$elem}
      @extend %pseudos
      width: $elemWidth
      height: $elemHeight
      @content
  @else
    @error "#{$elem}" is not a valid pseudo-element



// [12] Shapes
// ==========================================================================

/// Shapes - Circle
/// @group Mixins
/// @example sass - Usage
///   .selector
///     +circle(50)

=circle($size)
  +radius($size / 2)


/// Shapes - Triangle
/// @group Mixins
/// @example:
///   .selector
///     +triangle(up, 12, $gray, 5)

=triangle($direction, $size, $clr, $offset: 3)

  @if $direction == 'up'
    border-right: $size solid transparent
    border-bottom: $size * $ms-ratio solid $clr
    border-left: $size solid transparent
    top: -$size * $ms-ratio
    left: 50% - $ms-ratio * $offset

  @else if $direction == 'down'
    border-top: $size * $ms-ratio solid $clr
    border-right: $size solid transparent
    border-left: $size solid transparent
    bottom: -$size * $ms-ratio
    left: 50% - $ms-ratio * $offset

  @else if $direction == 'left'
    border-top: $size solid transparent
    border-right: $size * $ms-ratio solid $clr
    border-bottom: $size solid transparent
    left: -$size * $ms-ratio
    top: 50% - $ms-ratio * $offset

  @else if $direction == 'right'
    border-top: $size solid transparent
    border-bottom: $size solid transparent
    border-left: $size * $ms-ratio solid $clr
    right: -$size * $ms-ratio
    top: 50% - $ms-ratio * $offset



// [13] Skins
// ==========================================================================

/// Customises your blocks or buttons with a different background color and/or
/// text color. If no text color is specified it will default to white.
/// @group Mixins

=block-skin($clr)
  border-color: shade($clr, 5%)
  background-color: $clr


=button-skin($clr, $bg)
  +transition(all 300ms linear)
  color: $clr
  border-color: darken($bg, 5%)
  background-color: $bg
  &:hover
    color: darken($clr, 5%)
    border-color: darken($bg, 10%)
    background-color: darken($bg, 5%)

=alert-skin($clr)
  color: shade($clr, 45%)
  border-color: shade($clr, 15%)
  background-color: rgba($clr, .8)


// [14] Background Images
// ==========================================================================


/// Background Banners
/// Revisit - not working

=fullwidth-banner($origin: content-box, $position: center, $color: $color__background)
  @extend %bg-cover
  background-origin: $origin
  background-position: $position
  background-repeat: no-repeat
  background-color: $color


/// Fullscreen Background for < IE8
/// @example sass - Usage
///   .foobar
///     +fullscreen-bg


=fullscreen-bg($size, $position, $location)
  +size(200%, 200%)
  +position(fix)
  top: -50%
  left: -50%
  //width: 200%
  //height: 200%
  img
    +position(abs)
    +location(all)
    margin: auto
    min-width: 50%
    min-height: 50%



// [15] Opacity & Colors
// ==========================================================================


/// Semi-Transparent Colors
/// @example:
///   .foobar
///     +alpha-attr('background-color', rgba(black, 0.3) white)

=alpha-attr($attr, $color, $bg)
  $percent: alpha($color) * 100%
  $opaque: opacify($color, 1)
  $color__solid: mix($opaque, $bg, $percent)
  #{$attr}: $color__solid
  #{$attr}: $color


/// Opacity filter < IE7 Fallback
/// @example:
///   .foobar
///     +opacity(4)

=opacity($opacity)
  filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})")
  opacity: $opacity

  //Hack IE6
  &.lt-ie7
    filter : alpha(opacity=#{round($opacity * 100)})
    zoom: 1



/// RGBA Fallback
/// @example:
///   .foobar
///     +rgba-bg(#F37, .9)

=rgba-bg($color, $percent)
  background: $color
  background: rgba($color, $percent)



// [16] Card Depths
// ==========================================================================

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @link https://css-tricks.com/snippets/sass/material-shadows-mixin/
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow

=card-depth($depth)
  @if $depth < 1
    box-shadow: none
  @else if $depth > 5
    @warn "Invalid $depth `#{$depth}` for mixin `card`."
  @else
    box-shadow: bottom-shadow($depth), top-shadow($depth)
